name: CI/CD Workflow

on:
  workflow_run:
    workflows: ["Terraform Plan and Apply"]
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:

      - name: Set environment variables
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/develop' ]]; then
            echo "FRONTEND_ECR_REPOSITORY=blogging-demo-staging-frontend" >> "$GITHUB_ENV"
            echo "BACKEND_ECR_REPOSITORY=blogging-demo-staging-backend" >> "$GITHUB_ENV"
          elif [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "FRONTEND_ECR_REPOSITORY=blogging-demo-production-frontend" >> "$GITHUB_ENV"
            echo "BACKEND_ECR_REPOSITORY=blogging-demo-production-backend" >> "$GITHUB_ENV"     
          fi   

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Configure AWS credentials
        id: aws_credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend Docker image
        id: frontend-build-image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG -f Frontend_Dockerfile .
          docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "FRONTEND_IMAGE=$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        working-directory: demo_apps/

      - name: Build and push backend Docker image
        id: backend-build-image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG -f Backend_Dockerfile .
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "BACKEND_IMAGE=$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        working-directory: demo_apps/
    outputs:
      FRONTEND_IMAGE: ${{ steps.frontend-build-image.outputs.FRONTEND_IMAGE }}
      BACKEND_IMAGE: ${{ steps.backend-build-image.outputs.BACKEND_IMAGE }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    
      - name: Set environment variables
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/develop' ]]; then
            echo "ECS_CLUSTER=blogging-demo-staging-ecs-cluster" >> "$GITHUB_ENV"
            echo "FRONEND_ECS_SERVICE=blogging-demo-staging-frontend" >> "$GITHUB_ENV"
            echo "FRONTEND_ECS_TASK_DEFINITION=blogging-demo-staging-frontend" >> "$GITHUB_ENV"
            echo "FRONTEND_CONTAINER_NAME=frontend" >> "$GITHUB_ENV"
            echo "BACKEND_ECS_SERVICE=blogging-demo-staging-backend" >> "$GITHUB_ENV"
            echo "BACKEND_ECS_TASK_DEFINITION=blogging-demo-staging-backend" >> "$GITHUB_ENV"
            echo "BACKEND_CONTAINER_NAME=backend" >> "$GITHUB_ENV"
            echo "FRONTEND_ECR_REPOSITORY=blogging-demo-staging-frontend" >> "$GITHUB_ENV"
            echo "BACKEND_ECR_REPOSITORY=blogging-demo-staging-backend" >> "$GITHUB_ENV"
          elif [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ECS_CLUSTER=blogging-demo-production-ecs-cluster" >> "$GITHUB_ENV"
            echo "FRONEND_ECS_SERVICE=blogging-demo-production-frontend" >> "$GITHUB_ENV"
            echo "FRONTEND_ECS_TASK_DEFINITION=blogging-demo-production-frontend" >> "$GITHUB_ENV"
            echo "FRONTEND_CONTAINER_NAME=frontend" >> "$GITHUB_ENV"
            echo "BACKEND_ECS_SERVICE=blogging-demo-production-backend" >> "$GITHUB_ENV"
            echo "BACKEND_ECS_TASK_DEFINITION=blogging-demo-production-backend" >> "$GITHUB_ENV"
            echo "BACKEND_CONTAINER_NAME=backend" >> "$GITHUB_ENV"
            echo "FRONTEND_ECR_REPOSITORY=blogging-demo-production-frontend" >> "$GITHUB_ENV"
            echo "BACKEND_ECR_REPOSITORY=blogging-demo-production-backend" >> "$GITHUB_ENV"  
          fi
      
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Configure AWS credentials
        id: aws_credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download Frontend task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ env.FRONTEND_ECS_TASK_DEFINITION }} \
          --query taskDefinition > ${{ env.FRONTEND_ECS_TASK_DEFINITION }}.json

      - name: Download Backend task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.BACKEND_ECS_TASK_DEFINITION }} \
            --query taskDefinition > ${{ env.BACKEND_ECS_TASK_DEFINITION }}.json

      - name: Fill in the new image ID in the Amazon ECS Frontend task definition
        id: frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
        with:
          task-definition: ${{ env.FRONTEND_ECS_TASK_DEFINITION }}.json
          container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Fill in the new image ID in the Amazon ECS Backend task definition
        id: backend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
        with:
          task-definition: ${{ env.BACKEND_ECS_TASK_DEFINITION }}.json
          container-name: ${{ env.BACKEND_CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy Frontend Amazon ECS task definition
        id: deploy-frontend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
          service: ${{ env.FRONTEND_ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Deploy Backend Amazon ECS task definition
        id: deploy-backend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
          service: ${{ env.BACKEND_ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
  
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - run: echo 'The triggering workflow failed'